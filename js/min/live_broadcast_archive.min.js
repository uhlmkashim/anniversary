"use strict";

function _classCallCheck(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
}
var _createClass = function() {
    function e(e, t) {
        for (var s = 0; s < t.length; s++) {
            var i = t[s];
            i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)
        }
    }
    return function(t, s, i) {
        return s && e(t.prototype, s), i && e(t, i), t
    }
}();
! function(e) {
    function t(i) {
        if (s[i]) return s[i].exports;
        var a = s[i] = {
            i: i,
            l: !1,
            exports: {}
        };
        return e[i].call(a.exports, a, a.exports, t), a.l = !0, a.exports
    }
    var s = {};
    t.m = e, t.c = s, t.d = function(e, s, i) {
        t.o(e, s) || Object.defineProperty(e, s, {
            configurable: !1,
            enumerable: !0,
            get: i
        })
    }, t.n = function(e) {
        var s = e && e.__esModule ? function() {
            return e["default"]
        } : function() {
            return e
        };
        return t.d(s, "a", s), s
    }, t.o = function(e, t) {
        return Object.prototype.hasOwnProperty.call(e, t)
    }, t.p = "", t(t.s = 0)
}([function(module, __webpack_exports__, __webpack_require__) {
    Object.defineProperty(__webpack_exports__, "__esModule", {
        value: !0
    });
    var __WEBPACK_IMPORTED_MODULE_0__lib_user_message__ = __webpack_require__(1),
        __WEBPACK_IMPORTED_MODULE_1__lib_idol_message__ = __webpack_require__(2),
        __WEBPACK_IMPORTED_MODULE_2__lib_clock_archive__ = __webpack_require__(3),
        __WEBPACK_IMPORTED_MODULE_3__lib_message_log__ = __webpack_require__(4),
        __WEBPACK_IMPORTED_MODULE_4__lib_archive_manager__ = __webpack_require__(5),
        __WEBPACK_IMPORTED_MODULE_5__lib_enquete__ = __webpack_require__(6),
        __WEBPACK_IMPORTED_MODULE_6__lib_draw_lots__ = __webpack_require__(7),
        __WEBPACK_IMPORTED_MODULE_7__lib_admin_message__ = __webpack_require__(8),
        __WEBPACK_IMPORTED_MODULE_8__lib_layer_manager__ = __webpack_require__(9),
        __WEBPACK_IMPORTED_MODULE_9__lib_log_view__ = __webpack_require__(10),
        LiveBroadcast = function LiveBroadcast(param) {
            function init_network() {
                archive_manager.init(function() {
                    layer_effects = archive_manager.getFirstLayerEffects(), self.idol_message_log.init([]), self.user_message_log.init([]), def_idol_message.resolve(), def_layer.resolve(), def_telop.resolve()
                })
            }

            function do_controller(ms) {
                if (1 != archive_state) {
                    if (0 == ms) return void(self.clock.isStop() ? (self.clock.play(), $(".radio_btn_play_stop").removeClass("_stop"), set_layer(), stopped_stage_idol.update(), stopped_stage_live_text.update(), $("#stopped_canvas_idol").hide(), $("#stopped_canvas_live_text").hide(), canvas.stage.update()) : self.clock.isPlay() && (self.clock.stop(), $(".radio_btn_play_stop").addClass("_stop"), stopped_stage_idol.addChild(cjs_roots.idol), stopped_stage_live_text.addChild(cjs_roots.live_text), stopped_stage_idol.update(), stopped_stage_live_text.update(), $("#stopped_canvas_idol").show(), $("#stopped_canvas_live_text").show()));
                    ms < 0 ? self.clock.prev(-ms) : ms > 0 && self.clock.next(ms), archive_state = 1, archive_manager.setArchiveId(self.clock.get_time_lapse_ms()), "hidden" == self.mode && (archive_manager.hiddenAt < self.clock.get_time_lapse_ms() && archive_manager.cameBackAt > self.clock.get_time_lapse_ms() ? self.idol_message.is_idol_hidden = !0 : self.idol_message.is_idol_hidden = !1), self.idol_message.is_idol_changed = !1, Object.keys(archive_manager.changedAt).some(function(e) {
                        return archive_manager.changedAt[e]["start"] < self.clock.get_time_lapse_ms() && archive_manager.changedAt[e]["finish"] > self.clock.get_time_lapse_ms() && (self.idol_message.is_idol_changed = !0, !0)
                    }), Object.keys(archive_manager.nicedAt).some(function(i) {
                        if (archive_manager.nicedAt[1]["time"] > self.clock.get_time_lapse_ms()) return self.idol_message.setNiceComment(0, 0), !0;
                        if (eval(i) + 1 == archive_manager.nicedAt.length) {
                            if (archive_manager.nicedAt[i]["time"] < self.clock.get_time_lapse_ms()) return self.idol_message.setNiceComment(archive_manager.nicedAt[i]["count"], 0), !0
                        } else if (archive_manager.nicedAt[i]["time"] < self.clock.get_time_lapse_ms() && archive_manager.nicedAt[eval(i) + 1]["time"] > self.clock.get_time_lapse_ms()) return self.idol_message.setNiceComment(archive_manager.nicedAt[i]["count"], 0), !0;
                        return !1
                    }), archive_manager.shouldLoadAhead() ? ($("#jsEyeCatch").show(), $("#main_area").css({
                        visibility: "hidden"
                    }), archive_manager.load(function() {
                        archive_manager.setArchiveId(self.clock.get_time_lapse_ms()), set_latest(), archive_state = 0, $("#jsEyeCatch").hide(), $("#main_area").css({
                            visibility: "visible"
                        })
                    })) : (set_latest(), archive_state = 0)
                }
            }

            function set_latest() {
                var e = archive_manager.getLatestLayerEffects();
                JSON.stringify(layer_effects) != JSON.stringify(e) && (layer_effects = e, set_layer()), self.user_message_log.reset();
                var t = archive_manager.getLatestUserMessageLog(self.user_message_log.max_log_message_num);
                t = t.reverse();
                for (var s = 0; s < t.length; s++) self.user_message_log.add(t[s]);
                self.idol_message_log.reset();
                var i = archive_manager.getLatestIdolMessageLog(self.idol_message_log.max_log_message_num);
                i = i.reverse();
                for (var a = 0; a < i.length; a++) self.idol_message_log.add(i[a]);
                if (archive_manager.layerOnAirAt - 1 < self.clock.get_time_lapse_ms() && archive_manager.speakAfterOnAirAt - 1 > self.clock.get_time_lapse_ms()) self.idol_message.hideIdolMessage(0, !1);
                else if (self.idol_message_log.isEmpty()) self.idol_message.show(1, !1), self.idol_message.hideIdolMessage(0, !1);
                else {
                    var _ = self.idol_message_log.get_latest_message();
                    _.idol_id == main_idol_id ? self.idol_message.show(_, !1, !0) : self.idol_message.show(_, !1, !1, !0)
                }
                self.user_message.reset();
                for (var n = self.user_message.max_message_num; n >= 0; n--) {
                    var l = self.user_message_log.get(n);
                    null != l && ("" == l.nickname && (l.nickname = l.send_user_name), self.user_message.flush(l.message, l.send_viewer_id == viewer_id))
                }
                var r = archive_manager.getAdminMessage();
                null != r && self.admin_message.setMessage(r), self.clock.isStop() && stopped_stage_idol.update()
            }

            function set_controller_state() {
                self.clock.is_close_time() ? ($radio_btn_next_5sec.addClass("_disabled"), $radio_btn_next_3min.addClass("_disabled")) : ($radio_btn_next_5sec.removeClass("_disabled"), $radio_btn_next_3min.removeClass("_disabled"))
            }

            function do_archive() {
                var e = archive_manager.getNext();
                if (self.clock.is_reach(e["time_lapse"])) {
                    set_queue(e);
                    archive_manager.doNext()
                }
                exec_queue()
            }

            function set_layer() {
                switch (self.layer_manager.set(layer_effects, layer_set_id), layer_set_id) {
                    case "1":
                        $("#live_broadcast").removeClass().addClass("_bg_opening");
                        break;
                    case "2":
                        $("#live_broadcast").removeClass().addClass("_bg_live");
                        break;
                    case "3":
                        $("#live_broadcast").removeClass().addClass("_bg_ending")
                }
                var e = {};
                ["idol", "idol_comment", "user_comment", "wall1", "wall2", "enquete", "enquete_result", "info_comment"].forEach(function(t) {
                    $("#layer_" + t).hide(), e[t] = self.layer_manager.get_layer_effect(t)
                }), Object.keys(cjs_roots).forEach(function(e) {
                    canvas.stage.removeChild(cjs_roots[e])
                }), $(".radio_bg_time").hide(), Object.keys(layer_effects).reverse().forEach(function(e) {
                    var t = layer_effects[e],
                        s = $("#layer_" + t.category_name);
                    switch (null != t.image_path && (t.category_name.match("wall") || t.category_name.match("enquete")) && (t.image_path.match("http") ? s.find(".wall_image").prop("src", t.image_path) : s.find(".wall_image").prop("src", image_url + t.image_path)), 3 == e && (0 == t.state ? ($("#layer_wall2").addClass("_show_layer").removeClass("_hide_layer"), $("#layer_user_comment").css("z-index", 4)) : ($("#layer_wall2").addClass("_hide_layer").removeClass("_show_layer"), $("#layer_user_comment").css("z-index", 0))), 0 == t.effectid ? s.hide() : s.show(), $("#main_area").append(s), t.category_name) {
                        case "idol":
                            if (self.clock.isPlay() && (canvas.stage.addChild(cjs_roots[t.category_name]), canvas.stage.addChild(cjs_roots["live_text"])), canvas.stage.addChild(cjs_roots["clock"]), $(".radio_bg_time").show(), self.idol_message.setEnableAnimation(Boolean(parseInt(live_bc_user_setting.enable_animation))), self.clock.isPlay() && self.layer_manager.is_already_exists("idol"));
                            else if (self.idol_message.isFlowingMessage());
                            else if (archive_manager.layerOnAirAt - 1 < self.clock.get_time_lapse_ms() && archive_manager.speakAfterOnAirAt - 1 > self.clock.get_time_lapse_ms()) self.idol_message.hideIdolMessage(0, !1);
                            else if (6 == self.layer_manager.before_layer_set_id && 2 == self.layer_manager.layer_set_id || 106 == self.layer_manager.before_layer_set_id && 102 == self.layer_manager.layer_set_id) {
                                var i = self.idol_message_log.get_latest_message();
                                i ? self.idol_message.show(i, !1, !0) : self.idol_message.setEmotion(0, 0, 0), self.idol_message.hideIdolMessage(0, !1)
                            } else if (self.idol_message_log.isEmpty()) self.idol_message.setEmotion(0, 0, 0), 18 == live_bc_id && (archive_manager.cameBackAt > self.clock.get_time_lapse_ms() ? self.idol_message.is_idol_hidden = !0 : self.idol_message.is_idol_hidden = !1, self.idol_message.setEmotion(0, 91, 0)), self.idol_message.hideIdolMessage(0, !1);
                            else {
                                var a = self.idol_message_log.get_latest_message();
                                self.idol_message.show(a, !1, !0)
                            }
                            self.clock.setCurrentTime();
                            break;
                        case "idol_comment":
                            canvas.stage.addChild(cjs_roots[t.category_name]);
                            break;
                        case "user_comment":
                            self.user_message.setEnableComment(Boolean(parseInt(live_bc_user_setting.enable_comment)))
                    }
                }), null == e["info_comment"] ? 1 == archive_state ? self.admin_message.close(!0) : self.admin_message.close() : 1 == archive_state ? self.admin_message.open(!0) : self.admin_message.open(self.layer_manager.is_first()), null != e["enquete"] && (self.layer_manager.is_already_exists("enquete") || (1 == archive_state ? self.enquete.open(e["enquete"].enquete_info, e["enquete"].enquete_answered_id, !1) : self.enquete.open(e["enquete"].enquete_info, e["enquete"].enquete_answered_id, self.enquete.should_animation(self.layer_manager)))), null != e["enquete_result"] && (1 == archive_state ? self.enquete.open_result(e["enquete_result"].enquete_result_info, !1) : self.enquete.open_result(e["enquete_result"].enquete_result_info, self.enquete.should_animation(self.layer_manager))), null == e["enquete"] && null == e["enquete_result"] && (1 == archive_state ? self.enquete.close_result(!1) : self.enquete.close_result())
            }

            function set_queue(e) {
                network_queue.push(e)
            }

            function exec_queue() {
                var e = network_queue.shift();
                if (null != e)
                    if ("hidden" == self.mode && self.idol_message.setIdolHidden(e), "changed" == self.mode && self.idol_message.setIdolChanged(e), 11 == e.send_admin_node_type);
                    else if (4 == e.log_type) self.admin_message.setMessage(e.message);
                else if ("" != e.expression_type) {
                    var t = e.message.match(/###ACTION_ONLY###/),
                        s = e.message.match(/###EXPRESSION_ONLY###TYPE_(.+)/);
                    null != t ? (self.idol_message.setEmotion(e.expression_type, e.motion_type, e.effect_type), 90 == e.motion_type && setTimeout(function() {
                        self.idol_message.hideIdolMessage(0, !1)
                    }, 300)) : null != s ? (self.idol_message.setEmotionOld(s[1]), 90 == e.motion_type && setTimeout(function() {
                        self.idol_message.hideIdolMessage(0, !1)
                    }, 300)) : archive_manager.layerOnAirAt - 1 < self.clock.get_time_lapse_ms() && archive_manager.speakAfterOnAirAt - 1 > self.clock.get_time_lapse_ms() ? self.idol_message.hideIdolMessage(0, !1) : main_idol_id == e.idol_id ? (self.idol_message.show(e), self.idol_message_log.add(e)) : "" != e.idol_id && (self.idol_message.show(e, !0, !1, !0), self.idol_message_log.add(e))
                } else "" != e.message ? ("" == e.nickname && (e.nickname = e.send_user_name), self.user_message.flush(e.message, e.send_viewer_id == viewer_id), self.user_message_log.add(e)) : "" != e.json_layer_effects ? (layer_effects = e.json_layer_effects, layer_set_id = e.layer_effects_set_id, set_layer(layer_effects, layer_set_id), (6 == self.layer_manager.before_layer_set_id && 2 == self.layer_manager.layer_set_id || 106 == self.layer_manager.before_layer_set_id && 102 == self.layer_manager.layer_set_id) && self.idol_message.hideIdolMessage(0, !1)) : null != e["admin_setting[close_time]"] ? self.clock.set_close_time(e["admin_setting[close_time]"]) : null != e["nice_comment_count"] && "" != e["nice_comment_count"] ? viewer_id == e.send_viewer_id && self.idol_message.setNiceComment(e["nice_comment_count"]) : "" != e["stamp_id"] && (e.send_viewer_id == viewer_id ? self.draw_lots.cjs_root.run(e.stamp_id - 1) : self.draw_lots.showOthers(e.stamp_id, e.send_viewer_id == viewer_id))
            }
            _classCallCheck(this, LiveBroadcast);
            var image_url = param.image_url,
                cjs_list = param.cjs_list,
                manifest = param.manifest,
                api_url = param.api_url,
                url = param.url,
                idol_attribute_num = param.idol_attribute_num,
                viewer_id = param.viewer_id,
                live_bc_id = param.live_bc_id,
                max_flush_message_num = param.max_flush_message_num,
                max_log_idol_message_num = param.max_log_idol_message_num,
                max_log_user_message_num = param.max_log_user_message_num,
                live_bc_user_setting = param.live_bc_user_setting,
                live_bc_user_status = param.live_bc_user_status,
                live_bc_start_time = param.live_bc_start_time,
                start_time = param.start_time,
                close_time = param.close_time,
                nice_comment_count = param.nice_comment_count,
                main_idol_id = param.main_idol_id,
                guest_idol_attribute_num = param.guest_idol_attribute_num,
                draw_lot_params = param.draw_lot_params,
                self = this,
                cjs_roots = {
                    idol: null,
                    clock: null,
                    live_text: null,
                    idol_comment: null,
                    user_comment: null
                };
            window.cjs_roots = cjs_roots;
            var canvas = null,
                canvas2 = null,
                layer_effects = null,
                layer_set_id = 0,
                network_queue = [],
                fps_18_ms = 1e3 / 18,
                fps_60_ms = 1e3 / 60,
                def_layer = new $.Deferred,
                def_canvas = new $.Deferred,
                def_idol_message = new $.Deferred,
                def_telop = new $.Deferred;
            switch (def_layer.promise(), def_canvas.promise(), def_idol_message.promise(), def_telop.promise(), this.mode = "", live_bc_id) {
                case "8":
                case "18":
                    this.mode = "hidden";
                    break;
                case "9":
                    this.mode = "changed";
                    break;
                default:
                    live_bc_id >= 10 && (this.mode = "nice_hidden", this.nice_count = nice_comment_count)
            }
            this.user_message = new __WEBPACK_IMPORTED_MODULE_0__lib_user_message__["a"](max_flush_message_num), this.idol_message = new __WEBPACK_IMPORTED_MODULE_1__lib_idol_message__["a"]({}, this.mode, live_bc_id, this.nice_count, main_idol_id, idol_attribute_num, guest_idol_attribute_num), this.clock = new __WEBPACK_IMPORTED_MODULE_2__lib_clock_archive__["a"](live_bc_start_time, start_time, close_time, url.restrict_redirect), this.idol_message_log = new __WEBPACK_IMPORTED_MODULE_3__lib_message_log__["a"](max_log_idol_message_num, $("#idol_message_area").find(".log_message_container"), main_idol_id, idol_attribute_num, guest_idol_attribute_num), this.user_message_log = new __WEBPACK_IMPORTED_MODULE_3__lib_message_log__["a"](max_log_user_message_num, $("#user_message_area").find(".log_message_container")), this.enquete = new __WEBPACK_IMPORTED_MODULE_5__lib_enquete__["a"](api_url.add_enquete, !0), this.admin_message = new __WEBPACK_IMPORTED_MODULE_7__lib_admin_message__["a"], this.admin_message.init(live_bc_id), this.layer_manager = new __WEBPACK_IMPORTED_MODULE_8__lib_layer_manager__["a"], this.log_view = new __WEBPACK_IMPORTED_MODULE_9__lib_log_view__["a"], void 0 != draw_lot_params && (this.draw_lots = new __WEBPACK_IMPORTED_MODULE_6__lib_draw_lots__["a"](api_url.send_lot, draw_lot_params), this.draw_lot_params = draw_lot_params);
            var archive_manager = new __WEBPACK_IMPORTED_MODULE_4__lib_archive_manager__["a"](api_url.get_archives, live_bc_id, this.clock, viewer_id);
            window.archive_manager = archive_manager;
            var intervalHandler = null,
                archive_state = 0,
                $radio_btn_next_5sec = $(".radio_btn_next_5sec"),
                $radio_btn_next_3min = $(".radio_btn_next_3min"),
                stopped_stage_idol = null,
                stopped_stage_live_text = null;
            init_network(), this.log_view.init(this.user_message_log, this.idol_message_log), $.when(def_layer, def_canvas, def_idol_message, def_telop).done(function() {
                set_layer(layer_effects, layer_set_id), intervalHandler = setInterval(function() {
                    set_controller_state(), self.clock.isStop() || (self.clock.update(), self.clock.is_nonactive() ? (do_controller(-1), self.clock.set_active()) : 0 == archive_state && do_archive())
                }, fps_60_ms), setTimeout(function() {
                    $("#jsEyeCatch").hide(), $("#main_area").css({
                        visibility: "visible"
                    })
                }, 100), $(".js_controller").on("click", function(e) {
                    self.idol_message.restartFlowMessage(!1, !1, !0);
                    var t = 1e3 * parseInt($(e.currentTarget).data("second"));
                    0 != $(e.currentTarget).data("second") && $("#enquete_detail_area").find(".js_animation_target").stop(!0, !0), do_controller(t)
                })
            }), requirejs(["easeljs", "tweenjs"], function() {
                requirejs(cjs_list, function() {
                    canvas = new Commonjs.Canvas, canvas2 = new Commonjs.Canvas, stopped_stage_idol = new createjs.Stage($("#stopped_canvas_idol")[0]), stopped_stage_live_text = new createjs.Stage($("#stopped_canvas_live_text")[0]);
                    var e = $("#main_canvas"),
                        t = $("#sub_canvas");
                    createjs.Ticker.timingMode = createjs.Ticker.RAF, canvas.init(e[0], manifest, lib, null, fps_18_ms, function() {
                        cjs_roots["idol"] = canvas.addChild("cjs001_character"), cjs_roots["live_text"] = canvas.addChild("cjs002_live_text"), cjs_roots["clock"] = canvas.addChild("cjs003_clock"), cjs_roots["idol_comment"] = canvas.addChild("cjs004_balloon"), cjs_roots["user_comment"] = new createjs.Container, canvas.stage.update(), setInterval(function() {
                            canvas.stage.update()
                        }, fps_18_ms), createjs.Ticker.addEventListener("tick", function() {
                            self.user_message.update()
                        }), self.user_message.init(cjs_roots["user_comment"], live_bc_id), self.idol_message.init(cjs_roots["idol_comment"], cjs_roots["idol"], self.clock), self.clock.init(cjs_roots["clock"], archive_manager), def_canvas.resolve()
                    }, !1), void 0 != draw_lot_params && canvas2.init(t[0], manifest, lib, null, fps_18_ms, function() {
                        cjs_roots["draw_lots"] = canvas2.addChild(self.draw_lot_params.draw_lot_lib_name), canvas2.stage.update(), setInterval(function() {
                            canvas2.stage.update()
                        }, fps_18_ms), self.draw_lots.init(cjs_roots["draw_lots"])
                    }, !1), window.canvas = canvas, window.canvas2 = canvas2
                })
            })
        };
    window.LiveBroadcast = LiveBroadcast
}, function(e, t, s) {
    s.d(t, "a", function() {
        return i
    });
    var i = function() {
        function e() {
            _classCallCheck(this, e), this.$frame = $(".radio_comment_board"), this.$container = $(".user_comment_board"), this.enable_comment = !0, this.message_color = "#160d6a", this.user_message_color = "#ed0889", this.max_message_num
        }
        return _createClass(e, [{
            key: "init",
            value: function(e, t) {
                this.max_message_num = t < 10 || 9999 == t ? 9 : 15;
                for (var s = 0; s < this.max_message_num; s++) {
                    var i = $("<div/>").html("&nbsp;");
                    this.$container.append(i)
                }
            }
        }, {
            key: "reset",
            value: function() {
                this.$container.children().each(function(e, t) {
                    $(t).html("&nbsp;")
                })
            }
        }, {
            key: "setFPS",
            value: function(e) {}
        }, {
            key: "setEnableComment",
            value: function(e) {
                this.enable_comment = e, this.$frame.toggle(e)
            }
        }, {
            key: "getEnableComment",
            value: function(e) {
                return this.enable_comment
            }
        }, {
            key: "update",
            value: function() {
                this.enable_comment
            }
        }, {
            key: "flush",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                if (this.enable_comment) {
                    var s = this.$container.children().first();
                    s.html(e), t ? s.css("color", this.user_message_color) : s.css("color", this.message_color), this.$container.append(s)
                }
            }
        }]), e
    }()
}, function(e, t, s) {
    s.d(t, "a", function() {
        return i
    });
    var i = function() {
        function e(t, s, i, a, _) {
            var n = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0,
                l = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 0;
            _classCallCheck(this, e), this.intervalMessage = null, this.ReStartMessage = null, this.current_expression_type = 0, this.current_motion_type = 0, this.hideMessageIntervalHandler = null, this.$idol_comment = $("#js_idol_comment"), this.$hide_idol_text = $(".js_hide_idol_text"), this.enable_animation = !0, this.idol_message_speed = $("#layer_idol_comment").data("mes_speed"), this.guest_idol_message_speed = $("#layer_idol_comment").data("mes_speed2"), this.idol_message_wait_1 = $("#layer_idol_comment").data("mes_wait_1"), this.idol_message_wait_2 = $("#layer_idol_comment").data("mes_wait_2"), this.balloon_direction = 0, this.main_idol_id = parseInt(_), this.idol_attribute_num = parseInt(n), this.guest_idol_attribute_num = parseInt(l), this.msg_spd = 0, this.nice_count = void 0 === a ? 0 : a, this.mode = s, this.live_bc_id = i, this.is_idol_hidden = !1, "hidden" == this.mode && this.setIdolHidden(t), this.is_idol_changed = !1, "changed" == this.mode && this.setIdolChanged(t)
        }
        return _createClass(e, [{
            key: "init",
            value: function(e, t, s) {
                this.cjs_root = e, this.cjs_root_idol = t, this.clock = s
            }
        }, {
            key: "setEnableAnimation",
            value: function(e) {
                this.enable_animation = e
            }
        }, {
            key: "show",
            value: function(e) {
                var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                    s = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
                    i = this,
                    a = arguments.length > 3 && void 0 !== arguments[3] && arguments[3],
                    _ = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
                this.live_bc_id < 12 && (a = !1);
                var n = this,
                    l = s && a ? _ : e.expression_type;
                if (clearTimeout(this.hideMessageIntervalHandler), this.appearIdolMessage(t), this.current_expression_type = e.expression_type, this.current_motion_type = e.motion_type, 14 == this.live_bc_id ? this.balloon_direction = 0 : this.balloon_direction = 8 == this.current_expression_type ? 1 : 0, a && (this.balloon_direction = 2), s ? ("hidden" == this.mode && (this.is_idol_hidden ? (this.balloon_direction = 1, this.setEmotion(8, 0, 0)) : (l = 9 == this.current_expression_type ? 1 : this.current_expression_type, this.setEmotion(l, 0, 0))), "changed" == this.mode && (this.is_idol_changed ? this.setEmotion(0, 81, 0) : (l = 13 == this.current_expression_type ? 7 : this.current_expression_type, this.setEmotion(l, 0, 0))), "nice_hidden" == this.mode && (this.is_idol_hidden ? this.balloon_direction = 1 : (l = 9 == this.current_expression_type ? 1 : this.current_expression_type, this.setEmotion(l, 0, 0)), this.cjs_root_idol.cjs001_character.like_count_up(this.nice_count, 0)), this.mode || this.setEmotion(l, 0, 0)) : a || (this.is_idol_hidden ? this.setEmotion(0, 91, 0) : this.is_idol_changed ? this.setEmotion(0, 81, 0) : this.setEmotion(this.current_expression_type, this.current_motion_type, 0)), a ? this.msg_spd = this.guest_idol_message_speed : (this.msg_spd = this.idol_message_speed, this.setExpression(this.current_expression_type, this.current_motion_type, t, s)), void 0 != e.message) {
                    var r = e.message.replace(/(\r\n|\n|\r)/gm, "<br>");
                    this.setFlowMessage(r, t), t ? this.enable_animation || this.hideIdolMessage(1e4, !0) : this.hideIdolMessage(5e3, !0), this.$hide_idol_text.html(r), setTimeout(function() {
                        var t = n.$hide_idol_text.height(),
                            s = Math.floor(t / 14),
                            _ = e.idol_id || e.message_idol_id || i.main_idol_id,
                            l = 0;
                        l = i.live_bc_id > 9 && 9999 != i.live_bc_id && _ != i.main_idol_id ? i.guest_idol_attribute_num + 3 : i.idol_attribute_num, s <= 3 ? (n.cjs_root.cjs004_balloon.attribute_change(l - 1), n.cjs_root.cjs004_balloon.line_num(0, i.balloon_direction)) : 4 == s ? (n.cjs_root.cjs004_balloon.attribute_change(l - 1), n.cjs_root.cjs004_balloon.line_num(1, i.balloon_direction)) : s >= 5 && (n.cjs_root.cjs004_balloon.attribute_change(l - 1), n.cjs_root.cjs004_balloon.line_num(2, i.balloon_direction)), n.$idol_comment.css({
                            height: t
                        }), a ? i.setExpressionGuest(!0, n, e.expression_type) : i.setExpressionGuest(!1, n)
                    }, 0)
                }
            }
        }, {
            key: "setExpression",
            value: function(e, t) {
                var s = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
                s = s && this.enable_animation, this.cjs_root_idol.cjs001_character.motion_act(parseInt(e), s)
            }
        }, {
            key: "setExpressionGuest",
            value: function(e, t) {
                var s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
                t.cjs_root.cjs004_balloon.core.chara_1 && (e ? (t.cjs_root.cjs004_balloon.core.chara_1.visible = !0, t.cjs_root.cjs004_balloon.core.chara_1.gotoAndStop(s)) : t.cjs_root.cjs004_balloon.core.chara_1.visible = !1)
            }
        }, {
            key: "setEmotion",
            value: function(e, t, s) {
                if (9999 != this.live_bc_id && 1 != this.live_bc_id)
                    if (this.enable_animation) {
                        var i = e;
                        i < 0 ? i = this.current_expression_type : this.current_expression_type = e, this.cjs_root_idol.cjs001_character.detail_select(parseInt(i), parseInt(t), parseInt(s))
                    } else {
                        var a = t,
                            _ = e;
                        _ < 0 ? _ = this.current_expression_type : this.current_expression_type = e, "hidden" == this.mode && (90 == a || (a = this.is_idol_hidden ? 91 : 0)), "changed" == this.mode && (a = this.is_idol_changed ? 81 : 0, 13 != e && 82 != t || (_ = 7)), this.cjs_root_idol.cjs001_character.detail_select(parseInt(_), parseInt(a), 0)
                    }
            }
        }, {
            key: "setEmotionOld",
            value: function(e) {
                this.enable_animation && this.cjs_root_idol.cjs001_character.effect_act(parseInt(e))
            }
        }, {
            key: "setNiceComment",
            value: function(e, t) {
                this.cjs_root_idol.cjs001_character.like_count_up(parseInt(e), void 0 === t ? 1 : t)
            }
        }, {
            key: "setFlowMessage",
            value: function(e) {
                var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                this.$idol_comment.empty(), clearInterval(this.intervalMessage), t ? (this.restartFlowMessage(!1, !1, !0), this.flowMessage(e)) : this.$idol_comment.html(e)
            }
        }, {
            key: "update",
            value: function() {}
        }, {
            key: "flowMessage",
            value: function(e) {
                var t = this;
                this.intervalMessage = setInterval(function() {
                    var s = void 0;
                    null != t.clock && t.clock.isStop() || (null != e.match(/^<br ?\/?>/) ? (s = "<br />", t.$idol_comment.append(s), e = e.replace(/^<br ?\/?>/, "")) : (s = e.substr(0, 1), t.$idol_comment.append(s), e = e.substr(1), "、" === s && "" != e.length && (clearInterval(t.intervalMessage), t.restartFlowMessage(e, t.idol_message_wait_1)), "。" === s && "" != e.length && (clearInterval(t.intervalMessage), t.restartFlowMessage(e, t.idol_message_wait_2))), "" == e && (clearInterval(t.intervalMessage), t.hideIdolMessage(1e4, !0)), t.$hide_idol_text.html(""))
                }, this.msg_spd)
            }
        }, {
            key: "restartFlowMessage",
            value: function(e, t, s) {
                var i = this;
                s ? clearTimeout(this.ReStartMessage) : this.ReStartMessage = setTimeout(function() {
                    i.flowMessage(e)
                }, t)
            }
        }, {
            key: "isFlowingMessage",
            value: function() {
                return null != this.intervalMessage
            }
        }, {
            key: "appearIdolMessage",
            value: function(e) {
                e = e && this.enable_animation, e ? this.cjs_root.cjs004_balloon.motion_run("open", this.balloon_direction) : this.cjs_root.cjs004_balloon.motion_run("opened", this.balloon_direction), this.$idol_comment.show()
            }
        }, {
            key: "hideIdolMessage",
            value: function(e, t) {
                var s = this,
                    i = 0;
                t = t && this.enable_animation, clearTimeout(this.hideMessageIntervalHandler), 0 == e ? this.hideIdolMessgeImmediate(t) : this.hideMessageIntervalHandler = setInterval(function() {
                    null != s.clock && s.clock.isStop() || (i += 50) >= e && (s.hideIdolMessgeImmediate(t), clearInterval(s.hideMessageIntervalHandler))
                }, 50)
            }
        }, {
            key: "hideIdolMessgeImmediate",
            value: function(e) {
                e ? this.cjs_root.cjs004_balloon.motion_run("close", this.balloon_direction) : this.cjs_root.cjs004_balloon.motion_run("closed", this.balloon_direction), this.$idol_comment.hide()
            }
        }, {
            key: "setIdolHidden",
            value: function(e) {
                if (!e) return !1;
                if (!e.expression_type && !e.motion_type) return !1;
                var t = !1;
                7 != e.expression_type && 8 != e.expression_type || (t = !0), 90 != e.motion_type && 91 != e.motion_type || (t = !0), this.is_idol_hidden = t
            }
        }, {
            key: "setIdolChanged",
            value: function(e) {
                if (!e) return !1;
                if (!e.expression_type && !e.motion_type) return !1;
                var t = !1;
                11 != e.expression_type && 12 != e.expression_type || (t = !0), 80 != e.motion_type && 81 != e.motion_type && 83 != e.motion_type || (t = !0), this.is_idol_changed = t
            }
        }]), e
    }()
}, function(e, t, s) {
    s.d(t, "a", function() {
        return i
    });
    var i = function() {
        function e(t, s, i, a) {
            _classCallCheck(this, e), this.current_date = new Date, this.live_bc_start_time = new Date(this.convert_correct_time(t)), this.start_time = new Date(this.convert_correct_time(s)), this.set_close_time(i), this.close_redirect_url = a, this.prev_limit = this.start_time.getTime() - this.live_bc_start_time.getTime(), this.time_lapse_ms = this.prev_limit, this.is_stop = !1
        }
        return _createClass(e, [{
            key: "init",
            value: function(e, t) {
                this.cjs_root = e, this.archive_manager = t, this.start()
            }
        }, {
            key: "calc_relative_time",
            value: function(e) {
                return Math.floor(1e3 * e) - this.live_bc_start_time.getTime()
            }
        }, {
            key: "get_time_lapse_ms",
            value: function() {
                return this.time_lapse_ms
            }
        }, {
            key: "is_reach",
            value: function(e) {
                return this.time_lapse_ms >= e
            }
        }, {
            key: "is_nonactive",
            value: function() {
                return this.nonactcive_flg
            }
        }, {
            key: "set_active",
            value: function() {
                this.nonactcive_flg = !1
            }
        }, {
            key: "is_close_time",
            value: function() {
                return this.time_lapse_ms >= this.close_time_ms
            }
        }, {
            key: "update",
            value: function() {
                var e = new Date;
                this.is_close_time() || this.isStop() || (e.getTime() - this.current_date.getTime() >= 1e3 && (this.nonactcive_flg = !0), this.time_lapse_ms += e.getTime() - this.current_date.getTime(), this.current_date.getSeconds() != e.getSeconds() && this.setCurrentTime(this.time_lapse_ms)), this.current_date = e
            }
        }, {
            key: "set_close_time",
            value: function(e) {
                this.close_time = new Date(this.convert_correct_time(e)), this.close_time_ms = this.close_time.getTime() - this.live_bc_start_time.getTime()
            }
        }, {
            key: "convert_correct_time",
            value: function(e) {
                return e.replace(/(\d\d\d\d)-(\d\d)-(\d\d)/, "$1/$2/$3")
            }
        }, {
            key: "start",
            value: function() {}
        }, {
            key: "setCurrentTime",
            value: function(e) {
                var t = Commonjs.getFormatTime(e, "hhmmss");
                this.cjs_root.cjs003_clock.update_timer({
                    h1: t[0],
                    h2: t[1],
                    m1: t[2],
                    m2: t[3],
                    s1: t[4],
                    s2: t[5]
                })
            }
        }, {
            key: "next",
            value: function(e) {
                this.time_lapse_ms = Math.min(this.close_time_ms, this.time_lapse_ms + e), this.setCurrentTime(this.time_lapse_ms)
            }
        }, {
            key: "prev",
            value: function(e) {
                this.time_lapse_ms = Math.max(this.prev_limit, this.time_lapse_ms - e), this.setCurrentTime(this.time_lapse_ms)
            }
        }, {
            key: "stop",
            value: function() {
                this.is_stop = !0
            }
        }, {
            key: "isStop",
            value: function() {
                return this.is_stop
            }
        }, {
            key: "play",
            value: function() {
                this.is_stop = !1, this.current_date = new Date
            }
        }, {
            key: "isPlay",
            value: function() {
                return !this.is_stop
            }
        }]), e
    }()
}, function(e, t, s) {
    s.d(t, "a", function() {
        return i
    });
    var i = function() {
        function e(t, s) {
            var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -1,
                a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : -1,
                _ = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : -1;
            _classCallCheck(this, e), this.message_list = null, this.max_log_message_num = t, this.$view = s, this.counter = 0, this.main_idol_id = i, this.main_attr = a - 1, this.guest_attr = _ - 1, this.attr_color = ["#ff0073", "#006aff", "#ffaa00"], this.guest_attr_color = ["#f55fa3", "#5f9ef5", "#f5c35f"]
        }
        return _createClass(e, [{
            key: "init",
            value: function(e) {
                this.message_list = e
            }
        }, {
            key: "reset",
            value: function() {
                this.message_list = [], this.$view.empty(), this.counter = 0
            }
        }, {
            key: "isEmpty",
            value: function() {
                return this.message_list.length <= 0
            }
        }, {
            key: "add",
            value: function(e) {
                if (null != this.message_list && this.message_list.length >= this.max_log_message_num && (this.message_list = this.message_list.slice(0, -1)), this.message_list.unshift(e), null != this.$view) {
                    var t = this.$view.children(),
                        s = this.counter % 2,
                        i = null,
                        a = void 0,
                        _ = e.idol_id || e.message_idol_id;
                    t.length >= this.max_log_message_num && t.last().remove(), _ && this.main_idol_id > 0 ? (a = _ == this.main_idol_id ? this.attr_color[this.main_attr] : this.attr_color[this.guest_attr], i = $("<div class='log_message'>" + e.message + "<span style='color:" + a + "'>(" + e.idol_short_name + ")</span></div>"), s && i.addClass("_even"), this.counter++) : "" != e.message && (i = $("<div class='log_message'>" + e.message + "</div>"), s && i.addClass("_even"), this.counter++), this.$view.prepend(i)
                }
            }
        }, {
            key: "get",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
                return this.message_list[e]
            }
        }, {
            key: "get_latest_message",
            value: function() {
                arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                return this.get()
            }
        }, {
            key: "show",
            value: function() {
                null != this.$view && this.$view.parent().show()
            }
        }, {
            key: "hide",
            value: function() {
                null != this.$view && this.$view.parent().hide()
            }
        }, {
            key: "update",
            value: function() {}
        }]), e
    }()
}, function(e, t, s) {
    s.d(t, "a", function() {
        return i
    });
    var i = function() {
        function e(t, s, i, a) {
            _classCallCheck(this, e), this.api_get_archives = t, this.viewer_id = a, this.live_bc_id = s, this.current_offset = 0, this.current_archive_id = 1, this.last_archive_id = 1, this.archives = [], this.first_layer_effects = null, this.clock = i, this.load_ahead_threshold = 300, this.is_complete = !1, this.is_loading = !1, this.hiddenAt = 0, this.cameBackAt = 0, this.layerOnAirAt = 0, this.speakAfterOnAirAt = 0, this.beforeLayerSetID = 0, this.changeCounter = 0, this.changedAt = {}, this.nicedAt = []
        }
        return _createClass(e, [{
            key: "init",
            value: function(e) {
                this.load(e)
            }
        }, {
            key: "load",
            value: function(e) {
                var t = this,
                    s = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.current_offset;
                this.is_loading = !0;
                var i = this;
                $.ajax({
                    url: this.api_get_archives,
                    type: "get",
                    data: {
                        target_live_bc_id: this.live_bc_id,
                        offset: s
                    },
                    success: function(s) {
                        $.extend(t.archives, s.archives), i.current_offset += Object.keys(s.archives).length;
                        var a = i.changeCounter++;
                        i.changedAt[a] = {}, Object.keys(s.archives).forEach(function(e) {
                            var t = i.archives[e];
                            if (!1 === t) return void(i.is_complete = !0);
                            t.time_lapse = i.clock.calc_relative_time(t["send_timestamp"]), 90 == t.motion_type && (i.hiddenAt = i.clock.calc_relative_time(t["send_timestamp"])), 9 == t.expression_type && (i.cameBackAt = i.clock.calc_relative_time(t["send_timestamp"])), 102 == parseInt(t.layer_effects_set_id) && 106 == parseInt(i.beforeLayerSetID) && (i.layerOnAirAt = i.clock.calc_relative_time(t["send_timestamp"])), t.layer_effects_set_id && (i.beforeLayerSetID = t.layer_effects_set_id), i.layerOnAirAt > 0 && 0 == i.speakAfterOnAirAt && 2 == t.log_type && (i.speakAfterOnAirAt = i.clock.calc_relative_time(t["send_timestamp"])), 11 == t.expression_type && (i.changedAt[a]["passed"] = !1, i.changedAt[a]["start"] = i.clock.calc_relative_time(t["send_timestamp"])), 13 == t.expression_type && (i.changedAt[a]["finish"] = i.clock.calc_relative_time(t["send_timestamp"])), i.clock.is_reach(t.time_lapse) && (i.current_archive_id = parseInt(t.archive_id)), t.nice_comment_count && "" != t.nice_comment_count && i.viewer_id == t.send_viewer_id && (i.nicedAt[t.nice_comment_count] = [], i.nicedAt[t.nice_comment_count]["time"] = i.clock.calc_relative_time(t["send_timestamp"]), i.nicedAt[t.nice_comment_count]["count"] = t.nice_comment_count)
                        });
                        var _ = s.archives[1];
                        null != _ && 1 == _.archive_id && (i.first_layer_effects = _.json_layer_effects);
                        var n = Object.keys(i.archives).reverse()[0];
                        n > i.last_archive_id && (i.last_archive_id = n), i.is_loading = !1, null != e && e(s.archives)
                    },
                    error: function() {
                        alert("アーカイブの取得に失敗しました")
                    }
                })
            }
        }, {
            key: "getFirstLayerEffects",
            value: function() {
                return this.first_layer_effects
            }
        }, {
            key: "getCurrent",
            value: function() {
                return this.archives[this.current_archive_id]
            }
        }, {
            key: "getNext",
            value: function() {
                return this.archives[this.current_archive_id + 1]
            }
        }, {
            key: "doNext",
            value: function() {
                this.shouldLoadAhead() && this.load();
                var e = this.getNext();
                return null == e || 0 == e ? null : (this.current_archive_id = parseInt(e.archive_id), e)
            }
        }, {
            key: "shouldLoadAhead",
            value: function() {
                return !this.is_loading && !this.is_complete && this.current_archive_id >= this.last_archive_id - this.load_ahead_threshold
            }
        }, {
            key: "setArchiveId",
            value: function(e) {
                var t = this.archives[1].archive_id,
                    s = this;
                Object.keys(this.archives).forEach(function(e) {
                    var i = s.archives[e];
                    s.clock.is_reach(i.time_lapse) && (t = parseInt(i.archive_id))
                }), this.current_archive_id = t
            }
        }, {
            key: "getLatestIdolMessage",
            value: function() {
                for (var e = this.current_archive_id; e >= 0; e--)
                    if (2 == this.getArchiveType(e)) return this.archives[e];
                return null
            }
        }, {
            key: "getLatestLayerEffects",
            value: function() {
                for (var e = null, t = this.current_archive_id; t >= 0; t--)
                    if (5 == this.getArchiveType(t) && this.archives[t].time_lapse >= this.clock.prev_limit) {
                        e = this.archives[t].json_layer_effects;
                        break
                    } return null == e && (e = this.getFirstLayerEffects()), e
            }
        }, {
            key: "getLatestUserMessageLog",
            value: function(e) {
                for (var t = [], s = this.current_archive_id; s >= 0 && !(4 == this.getArchiveType(s) && this.archives[s].time_lapse >= this.clock.prev_limit && (t.push(this.archives[s]), t.length >= e)); s--);
                return t
            }
        }, {
            key: "getLatestIdolMessageLog",
            value: function(e) {
                for (var t = [], s = this.current_archive_id; s >= 0 && !(2 == this.getArchiveType(s) && (t.push(this.archives[s]), t.length >= e)); s--);
                return t
            }
        }, {
            key: "getAdminMessage",
            value: function() {
                for (var e = null, t = this.current_archive_id; t >= 0; t--)
                    if (7 == this.getArchiveType(t) && this.archives[t].time_lapse >= this.clock.prev_limit) {
                        e = this.archives[t]["message"];
                        break
                    } return e
            }
        }, {
            key: "getArchiveType",
            value: function(e) {
                var t = null,
                    s = this.archives[e];
                if (null != s) {
                    if (4 == s.log_type) t = 7;
                    else if (7 == s.log_type) t = 99;
                    else if (11 == s.send_admin_node_type) t = 1;
                    else if ("" != s.expression_type) {
                        var i = s.message.match(/###ACTION_ONLY###/),
                            a = s.message.match(/###EXPRESSION_ONLY###TYPE_(.+)/);
                        t = null == i && null == a ? 2 : 3
                    } else "" != s.message ? t = 4 : "" != s.json_layer_effects ? t = 5 : null != s["admin_setting[close_time]"] && (t = 6);
                    return t
                }
            }
        }]), e
    }()
}, function(e, t, s) {
    s.d(t, "a", function() {
        return i
    });
    var i = function() {
        function e(t) {
            var s = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            _classCallCheck(this, e);
            var i = this;
            this.api_add_enquete = t, this.is_archive = s, this.EnqueteDetailModel = Backbone.Model.extend({
                defaults: {}
            }), this.EnqueteDetailView = Backbone.View.extend({
                el: "#enquete_detail_area",
                template: _.template($("#template_enquete_detail").html()),
                initialize: function() {},
                events: {
                    "click .js_vote_enquete": "vote_enquete"
                },
                vote_enquete: function(e) {
                    i.is_archive || i.vote_enquete(e)
                },
                close: function(e) {
                    e ? $("#enquete_detail_area").find(".js_animation_target").slideUp(800, function() {
                        $("#enquete_detail_area").empty()
                    }) : ($("#enquete_detail_area").find(".js_animation_target").hide(), $("#enquete_detail_area").empty()), i.finish_icon_animation()
                },
                render: function() {
                    this.$el.html(this.template(this.model.toJSON()))
                }
            }), this.enquete_detail_model = new this.EnqueteDetailModel, this.enquete_detail_view = new this.EnqueteDetailView({
                model: this.enquete_detail_model
            }), this.$icon_enquete = $(".icon_enquete"), this.icon_animation_handler = null
        }
        return _createClass(e, [{
            key: "init",
            value: function() {}
        }, {
            key: "vote_enquete",
            value: function(e) {
                var t = this,
                    s = $(e.currentTarget)[0].getAttribute("data-enquete-type"),
                    i = $(e.currentTarget)[0].getAttribute("data-answer-id"),
                    a = this;
                $.ajax({
                    url: a.api_add_enquete,
                    type: "post",
                    data: {
                        enquete_type: s,
                        answer_id: i
                    },
                    success: function(e) {
                        if (!0 === e.result) a.open(t.current_enquete_info, i);
                        else switch (e.error_code) {
                            case 8:
                                alert("未公開のアンケートです。");
                                break;
                            case 9:
                                alert("アンケートのパラメータエラーです。");
                                break;
                            case 10:
                                location.reload();
                                break;
                            default:
                                alert("アンケートの送信に失敗しました。エラーコード：" + e.error_code)
                        }
                    },
                    error: function() {
                        alert("アンケートの送信に失敗しました")
                    }
                })
            }
        }, {
            key: "open",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
                    s = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                this.current_enquete_info = e, this.enquete_detail_model.set({
                    enquete_type: e.enquete_type,
                    enquete_title: e.enquete_title,
                    enquete_list: e.answer_list,
                    enquete_answered_id: t,
                    is_archive: this.is_archive,
                    result_flg: !1
                }), this.enquete_detail_view.render(), s && ($("#enquete_detail_area").find(".js_animation_target").hide(), $("#enquete_detail_area").find(".js_animation_target").slideDown(800)), this.set_enquete_icon()
            }
        }, {
            key: "open_result",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                e.length <= 0 || (this.enquete_detail_model.set({
                    enquete_type: e.enquete_type,
                    enquete_title: e.enquete_title,
                    enquete_list: e.answer_list,
                    enquete_answered_id: null,
                    result_flg: !0
                }), this.enquete_detail_view.render(), t && ($("#enquete_detail_area").find(".js_animation_target").hide(), $("#enquete_detail_area").find(".js_animation_target").slideDown(800)), this.set_enquete_result_icon())
            }
        }, {
            key: "close_result",
            value: function() {
                var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                this.finish_icon_animation(), this.enquete_detail_view.close(e)
            }
        }, {
            key: "set_enquete_icon",
            value: function() {
                this.$icon_enquete.removeClass("radio_icon_enquete_result"), this.$icon_enquete.addClass("radio_icon_enquete"), this.start_icon_animation()
            }
        }, {
            key: "set_enquete_result_icon",
            value: function() {
                this.$icon_enquete.removeClass("radio_icon_enquete"), this.$icon_enquete.addClass("radio_icon_enquete_result"), this.finish_icon_animation(), this.$icon_enquete.css("opacity", 1), this.$icon_enquete.show()
            }
        }, {
            key: "start_icon_animation",
            value: function() {
                var e = this;
                this.finish_icon_animation(), this.$icon_enquete.show(), this.icon_animation_handler = setInterval(function() {
                    e.$icon_enquete.css("opacity", 1 - e.$icon_enquete.css("opacity"))
                }, 730)
            }
        }, {
            key: "finish_icon_animation",
            value: function() {
                clearInterval(this.icon_animation_handler), this.$icon_enquete.hide()
            }
        }, {
            key: "should_animation",
            value: function(e) {
                var t = !0,
                    s = e.get_before_layer_effect("enquete"),
                    i = e.get_before_layer_effect("enquete_result"),
                    a = e.get_layer_effect("enquete"),
                    _ = e.get_layer_effect("enquete_result");
                return null == s && null == i || null == a && null == _ || (t = !1), t && !e.is_first()
            }
        }]), e
    }()
}, function(e, t, s) {
    s.d(t, "a", function() {
        return i
    });
    var i = function() {
        function e(t, s) {
            _classCallCheck(this, e), this.api_url = t, this.ui_param = s, this.lib_name = s.draw_lot_lib_name, this.restrict_msec = 1e4, this.submittable = !0, this.displayedNum = 0
        }
        return _createClass(e, [{
            key: "init",
            value: function(e) {
                var t = this;
                this.cjs_root = e[this.lib_name], this.ui_param.$btn_draw_lot.on("click", function() {
                    event.preventDefault(), t.draw()
                })
            }
        }, {
            key: "draw",
            value: function() {
                var e = this,
                    t = this,
                    s = null,
                    i = 0;
                setTimeout(function() {
                    0 != t.submittable && (t.submittable = !1, t.ui_param.$btn_draw_lot.addClass("_disabled").html(e.ui_param.draw_lot_text), $.ajax({
                        url: t.api_url,
                        type: "post",
                        data: {},
                        success: function(a) {
                            e.cjs_root.run(a.stamp_id - 1);
                            var _ = "";
                            if (0 == a.result) {
                                switch (a.error_code) {
                                    case 2:
                                        _ = "code 2";
                                        break;
                                    case 5:
                                        _ = "code 5";
                                        break;
                                    case 7:
                                        _ = "送信が制限されています。<br>前回の送信から" + e.restrict_msec / 1e3 + "秒待って送信してください。";
                                        break;
                                    default:
                                        _ = "送信に失敗しました。<br>error code:" + a.error_code + "<br>もう一度時間を置いて送信してください。"
                                }
                                return new Commonjs.Popup("popup-error").set({
                                    title: "エラー",
                                    contents: _
                                }).open(), t.submittable = !0, void t.ui_param.$btn_draw_lot.removeClass("_disabled _text_limit").text(e.ui_param.draw_lot_name)
                            }
                            t.ui_param.$btn_draw_lot.addClass("_disabled").text(e.ui_param.draw_lot_result_text), s = setInterval(function() {
                                i += 1e3, t.ui_param.$btn_draw_lot.addClass("_disabled _text_limit").html(e.ui_param.draw_lot_waiting_text + "<span class='yellow' style='font-size:13px;margin-left:2px'>" + (t.restrict_msec - i) / 1e3 + "</span> 秒"), i >= t.restrict_msec && (clearInterval(s), t.submittable = !0, i = 0, t.ui_param.$btn_draw_lot.removeClass("_disabled _text_limit").text(e.ui_param.draw_lot_name))
                            }, 1e3)
                        },
                        error: function() {
                            alert("通信に失敗しました"), t.submittable = !0, t.ui_param.$btn_draw_lot.removeClass("_disabled _text_limit").text(e.ui_param.draw_lot_name)
                        }
                    }))
                }, 100)
            }
        }, {
            key: "showOthers",
            value: function(e, t) {
                function s(e) {
                    var t = Math.floor(Math.random() * (l + o + o) - o),
                        i = Math.floor(Math.random() * (r + c + c) - c),
                        a = "l" == e ? t : i;
                    return "l" == e && a > 0 && a < l ? s(e) : a
                }
                if (!(t || this.displayedNum > 20)) {
                    var i = 3,
                        a = 1,
                        _ = 270,
                        n = 50,
                        l = 320,
                        r = 60,
                        o = 10,
                        c = 0;
                    $(window);
                    ! function() {
                        function t() {
                            var s = 2 * u * u * h * -1 / (d * h * h),
                                i = 1 + 2 * u * u * m / (d * h * h),
                                a = s * s - 4 * i;
                            if (a >= 0) {
                                var _ = Math.atan((-s - Math.sqrt(a)) / 2),
                                    n = Math.atan((-s + Math.sqrt(a)) / 2),
                                    l = Math.max(_, n);
                                ! function() {
                                    function t(e) {
                                        var s = (e - a) / 75,
                                            _ = u * Math.cos(l) * s,
                                            n = Math.tan(l) * _ - d / (2 * u * u * Math.cos(l) * Math.cos(l)) * _ * _,
                                            r = 0;
                                        r = c.left > o.left ? -_ : _, i.css({
                                            left: Math.round(c.left + r) + "px",
                                            top: Math.round(c.top - n) + "px"
                                        }), c.top - n < o.top ? requestAnimationFrame(t) : (i.remove(), window.live_broadcast.draw_lots.displayedNum--)
                                    }
                                    window.live_broadcast.draw_lots.displayedNum++;
                                    var s = window.live_broadcast.draw_lots.ui_param.$lot_class_name;
                                    $('<div class="lot_wrapper _' + s + '"><div class="lot"></div></div>').prependTo("#layer_user_comment");
                                    var i = $(".lot_wrapper").first();
                                    i.css({
                                        left: c.left + "px",
                                        top: c.top + "px"
                                    }), i.find(".lot").addClass("radio_" + s + "_" + e);
                                    var a = performance.now();
                                    requestAnimationFrame(t)
                                }()
                            } else u++, t()
                        }
                        var l = s("l"),
                            r = s("t"),
                            o = {
                                top: 400,
                                left: 0
                            },
                            c = {
                                top: r,
                                left: l
                            };
                        o.top = o.top, c.top = c.top, o.left = Math.floor(Math.random() * (_ - n) + n);
                        var d = Math.random() * (i - a) + a,
                            u = 0,
                            m = c.top - o.top,
                            h = o.left - c.left;
                        h = h < 0 ? -h : h, t()
                    }()
                }
            }
        }]), e
    }()
}, function(e, t, s) {
    s.d(t, "a", function() {
        return i
    });
    var i = function() {
        function e() {
            _classCallCheck(this, e), this.eval_status = {
                closed: 1,
                opened: 3,
                opening: 4,
                open_start: 5
            }, this.$wrapper = $("#admin_message"), this.$text = this.$wrapper.find(".admin_message_text"), this.$hide_dom = $(".js_hide_admin_message"), this.marquee_wait_width = 50, this.marquee_handler = null, this.status = this.eval_status["closed"]
        }
        return _createClass(e, [{
            key: "init",
            value: function(e) {
                this.marquee_threshold = e < 10 ? 320 : 170
            }
        }, {
            key: "isOpen",
            value: function() {
                return this.status == this.eval_status["open_start"] || this.status == this.eval_status["opening"] || this.status == this.eval_status["opened"]
            }
        }, {
            key: "open",
            value: function(e) {
                var t = this;
                this.isOpen() || (this.status = this.eval_status["open_start"], e ? this.$wrapper.removeClass("_animation") : this.$wrapper.addClass("_animation"), t.resetMarquee(), setTimeout(function() {
                    t.$wrapper.addClass("_show"), t.status = e ? t.eval_status["opened"] : t.eval_status["opening"], t.shouldMarquee() ? t.setMarqueeInit() : (t.$text.removeClass("_marquee"), t.status = t.eval_status["opened"])
                }, 0))
            }
        }, {
            key: "setMessage",
            value: function(e) {
                var t = this;
                this.message = e, this.$hide_dom.html(this.message), t.resetMarquee(), this.isOpen() && setTimeout(function() {
                    t.shouldMarquee() ? t.setMarqueeInit() : (t.$text.removeClass("_marquee"), t.status = t.eval_status["opened"])
                }, 0)
            }
        }, {
            key: "shouldMarquee",
            value: function() {
                return this.$hide_dom.width() >= this.marquee_threshold
            }
        }, {
            key: "resetMarquee",
            value: function() {
                this.$text.html(this.message).css("left", 0), clearInterval(this.marquee_wait_handler), clearInterval(this.marquee_handler)
            }
        }, {
            key: "setMarqueeInit",
            value: function() {
                var e = this;
                this.$text.addClass("_marquee"), this.status == this.eval_status["opened"] ? this.setMarqueeWait() : this.$wrapper.one("transitionEnd webkitTransitionEnd", function() {
                    e.status = e.eval_status["opened"], e.setMarqueeWait()
                })
            }
        }, {
            key: "setMarqueeWait",
            value: function() {
                var e = this;
                e.resetMarquee(), this.marquee_wait_handler = setTimeout(function() {
                    e.setMarquee()
                }, 3e3)
            }
        }, {
            key: "setMarquee",
            value: function() {
                var e = this;
                this.marquee_handler = setInterval(function() {
                    e.$text.css("left", "-=1px"), e.$text.css("left").replace("px", "") < -e.$hide_dom.width() - e.marquee_wait_width && e.setMarqueeWait()
                }, 20)
            }
        }, {
            key: "close",
            value: function() {
                var e = this,
                    t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                this.status = this.eval_status["closed"], this.$wrapper.toggleClass("_animation", !t), this.$wrapper.removeClass("_show"), this.$wrapper.one("transitionEnd webkitTransitionEnd", function() {
                    e.resetMarquee()
                })
            }
        }]), e
    }()
}, function(e, t, s) {
    s.d(t, "a", function() {
        return i
    });
    var i = function() {
        function e() {
            _classCallCheck(this, e), this.depth_by_category_name = null, this.layer_effects = null, this.layer_set_id = 0, this.before_depth_by_category_name = null, this.before_layer_effects = null, this.before_layer_set_id = 0
        }
        return _createClass(e, [{
            key: "init",
            value: function() {}
        }, {
            key: "set",
            value: function(e, t) {
                var s = this;
                this.before_layer_effects = this.layer_effects, this.before_depth_by_category_name = this.depth_by_category_name, this.before_layer_set_id = this.layer_set_id, this.layer_effects = e, this.layer_set_id = parseInt(t), this.depth_by_category_name = {}, Object.keys(e).forEach(function(t) {
                    var i = e[t];
                    null != i["category_name"] && (s.depth_by_category_name[i["category_name"]] = t)
                })
            }
        }, {
            key: "get_layer_effect",
            value: function(e) {
                return null == this.layer_effects ? null : this.layer_effects[this.depth_by_category_name[e]]
            }
        }, {
            key: "get_before_layer_effect",
            value: function(e) {
                return null == this.before_layer_effects ? null : this.before_layer_effects[this.before_depth_by_category_name[e]]
            }
        }, {
            key: "is_already_exists",
            value: function(e) {
                return null != this.get_layer_effect(e) && this.get_before_layer_effect(e)
            }
        }, {
            key: "is_first",
            value: function() {
                return null == this.before_layer_effects
            }
        }]), e
    }()
}, function(e, t, s) {
    s.d(t, "a", function() {
        return i
    });
    var i = function() {
        function e() {
            _classCallCheck(this, e);
            var t = this;
            this.log_state = 0, $(".log_btn_change").on("click", function(e) {
                t.log_state = 1 - t.log_state, t.setLogView()
            })
        }
        return _createClass(e, [{
            key: "init",
            value: function(e, t) {
                this.user_message_log = e, this.idol_message_log = t, this.setLogAndroid(), this.setLogView()
            }
        }, {
            key: "setLogView",
            value: function() {
                switch (this.log_state) {
                    case 0:
                        this.user_message_log.show(), this.idol_message_log.hide(), $(".js_log_title").removeClass("radio_text_title_idol_log").addClass("radio_text_title_producer_log");
                        break;
                    case 1:
                        this.user_message_log.hide(), this.idol_message_log.show(), $(".js_log_title").removeClass("radio_text_title_producer_log").addClass("radio_text_title_idol_log")
                }
            }
        }, {
            key: "setLogAndroid",
            value: function() {
                var e = $(".log_message_container"),
                    t = navigator.userAgent,
                    s = window.in_social_game_viewer,
                    i = !!window.chrome,
                    a = t.indexOf("AAWebview") > -1,
                    _ = Commonjs.getUAInfo(),
                    n = null != _ && "android" == _.os && _.version[0] < 5;
                if (!(s || i || a) && n) {
                    e.addClass("move-area");
                    var l = document.createElement("script");
                    l.src = window.area_slide_url, document.getElementsByTagName("head")[0].appendChild(l)
                }
            }
        }]), e
    }()
}]);
